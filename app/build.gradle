apply plugin: 'com.android.application'
def arcore_libpath = "${buildDir}/arcore-native"
// Create a configuration to mark which aars to extract .so files from
configurations { natives }

def setVersionName = { ->
    if (project.hasProperty("androidVersionName")) {
        println("Replacing versionName with supplied build parameter: " +
                "$androidVersionName")
        return androidVersionName
    } else {
        return "1.0"
    }
}
android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "face.atlas"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 1
        versionName setVersionName()

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11"
                arguments"-DANDROID_STL=c++_shared",
                        "-DANDROID_TOOLCHAIN=clang",
                        "-DARCORE_LIBPATH=${arcore_libpath}/jni",
                        "-DARCORE_INCLUDE=${project.rootDir}/third_party/arcore",
                        "-DGLM_INCLUDE=${project.rootDir}/third_party/glm"
            }
        }
        ndk {
            abiFilters "arm64-v8a", "armeabi-v7a", "x86"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
}

dependencies {
    // ARCore library
    implementation 'com.google.ar:core:1.18.0'
    natives 'com.google.ar:core:1.18.0'

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
// Extracts the shared libraries from aars in the natives configuration.
// This is done so that NDK builds can access these libraries.
task extractNativeLibraries() {
    // Always extract, this insures the native libs are updated if the version changes.
    outputs.upToDateWhen { false }
    doFirst {
        configurations.natives.files.each { f ->
            copy {
                from zipTree(f)
                into arcore_libpath
                include "jni/**/*"
            }
        }
    }
}

tasks.whenTaskAdded {
    task-> if (task.name.contains("external") && !task.name.contains("Clean")) {
        task.dependsOn(extractNativeLibraries)
    }
}